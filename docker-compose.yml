services:
  # nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: trustgambit-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "3000:80"  # Also expose on 3000 for compatibility
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trustgambit-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: trustgambit
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      POSTGRES_DB: trustgambit
      # Performance tuning for high concurrency (300+ req/sec)
      POSTGRES_MAX_CONNECTIONS: "200"
      POSTGRES_SHARED_BUFFERS: "256MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "1GB"
      POSTGRES_MAINTENANCE_WORK_MEM: "64MB"
      POSTGRES_WORK_MEM: "16MB"
      POSTGRES_WAL_BUFFERS: "16MB"
      POSTGRES_MAX_WAL_SIZE: "1GB"
      POSTGRES_MIN_WAL_SIZE: "80MB"
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "min_wal_size=80MB"
      - "-c"
      - "max_wal_size=1GB"
      - "-c"
      - "max_worker_processes=4"
      - "-c"
      - "max_parallel_workers_per_gather=2"
      - "-c"
      - "max_parallel_workers=4"
      - "-c"
      - "max_parallel_maintenance_workers=2"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trustgambit"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (optional - for production Socket.io)
  redis:
    image: redis:7-alpine
    container_name: trustgambit-redis
    restart: unless-stopped
    command:
      - "redis-server"
      - "--maxmemory"
      - "512mb"
      - "--maxmemory-policy"
      - "allkeys-lru"
      - "--save"
      - ""
      - "--appendonly"
      - "no"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # container_name removed to allow scaling
    restart: unless-stopped
    # ports removed - nginx will handle external access
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      # Database
      DATABASE_URL: postgresql://trustgambit:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/trustgambit?connection_limit=60&pool_timeout=10&connect_timeout=10
      
      # NextAuth Configuration
      # IMPORTANT: Set NEXTAUTH_URL to your public domain in production!
      # Local: http://localhost:3000
      # Production: https://yourdomain.com
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-super-secret-key-change-this-in-production}
      AUTH_TRUST_HOST: "true"
      
      # Redis (optional)
      REDIS_URL: redis://redis:6379
      
      # Node environment
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: sh -c "npx prisma migrate deploy && node server.js"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
